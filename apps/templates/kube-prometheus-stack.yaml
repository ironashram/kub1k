apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: kube-prometheus-stack
  namespace: argocd
  labels:
    app.m1k.cloud/cluster: kub1k
    app.m1k.cloud/source: upstream
spec:
  project: default
  syncPolicy:
    syncOptions:
      - CreateNamespace=true
      - ServerSideApply=true
    automated:
      prune: true
      selfHeal: true
  source:
    chart: kube-prometheus-stack
    repoURL: https://prometheus-community.github.io/helm-charts
    targetRevision: 70.3.0
    helm:
      values: |
        alertmanager:
          ingress:
            annotations:
              cert-manager.io/cluster-issuer: letsencrypt-prod
            enabled: true
            ingressClassName: haproxy
            hosts:
            - alertmanager.lab.m1k.cloud
            tls:
             - secretName: alertmanager-cert
               hosts:
               - alertmanager.lab.m1k.cloud

        grafana:
          admin:
            existingSecret: grafana-admin
            userKey: admin-user
            passwordKey: admin-password
          ingress:
            annotations:
              cert-manager.io/cluster-issuer: letsencrypt-prod
            enabled: true
            ingressClassName: haproxy
            hosts:
            - grafana.lab.m1k.cloud
            tls:
             - secretName: grafana-cert
               hosts:
               - grafana.lab.m1k.cloud
          serviceMonitor:
            labels:
              release: kube-prometheus-stack
          dashboardProviders:
            dashboardproviders.yaml:
              apiVersion: 1
              providers:
              - name: 'custom-grafana-dashboards'
                orgId: 1
                folder: ''
                type: file
                disableDeletion: true
                editable: true
                options:
                  path: /var/lib/grafana/dashboards/custom-grafana-dashboards
          dashboards:
            custom-grafana-dashboards:
              k8s-system-api-server:
                url: https://raw.githubusercontent.com/ironashram/kub1k/main/dashboards/k8s-system-api-server.json
              k8s-views-global:
                url: https://raw.githubusercontent.com/ironashram/kub1k/main/dashboards/k8s-views-global.json
              k8s-views-namespaces:
                url: https://raw.githubusercontent.com/ironashram/kub1k/main/dashboards/k8s-views-namespaces.json
              k8s-views-nodes:
                url: https://raw.githubusercontent.com/ironashram/kub1k/main/dashboards/k8s-views-nodes.json
              k8s-views-pods:
                url: https://raw.githubusercontent.com/ironashram/kub1k/main/dashboards/k8s-views-pods.json
              trivy-operator-vulnerabilities:
                url: https://raw.githubusercontent.com/ironashram/kub1k/main/dashboards/trivy-operator-vulnerabilities.json
              cilium-operator:
                url: https://raw.githubusercontent.com/ironashram/kub1k/main/dashboards/cilium-operator.json
              cilium:
                url: https://raw.githubusercontent.com/ironashram/kub1k/main/dashboards/cilium.json
              hubble:
                url: https://raw.githubusercontent.com/ironashram/kub1k/main/dashboards/cilium-hubble.json

        prometheus:
          serviceMonitor:
            relabelings:
              - action: replace
                targetLabel: cluster
                replacement: prometheus
          ingress:
            annotations:
              cert-manager.io/cluster-issuer: letsencrypt-prod
            enabled: true
            ingressClassName: haproxy
            hosts:
            - prometheus.lab.m1k.cloud
            tls:
             - secretName: prometheus-cert
               hosts:
               - prometheus.lab.m1k.cloud
          prometheusSpec:
            serviceMonitorSelectorNilUsesHelmValues: false
            serviceMonitorNamespaceSelector:
              matchExpressions:
              - key: kubernetes.io/metadata.name
                operator: Exists
            retention: 45d
            storageSpec:
              volumeClaimTemplate:
                spec:
                  storageClassName: synology-csi-default
                  accessModes: ["ReadWriteOnce"]
                  resources:
                    requests:
                      storage: 50Gi
            nodeSelector:
              node-role.kubernetes.io/worker: "true"

        prometheusOperator:
          tls:
            enabled: false
          admissionWebhooks:
            enabled: false
            failurePolicy: Ignore

        kubeApiServer:
          serviceMonitor:
            metricRelabelings:
              - sourceLabels: [ "__name__" ]
                regex: "(apiserver|workqueue|rest_client|process|go)_(.+)"
                action: keep

        kubelet:
          serviceMonitor:
            metricRelabelings:
              - sourceLabels: [ "__name__" ]
                regex: "(kubelet|storage|rest_client|process|go)_(.+)"
                action: keep

        kubeEtcd:
          endpoints:
            - 10.0.0.241
          serviceMonitor:
            metricRelabelings:
              - sourceLabels: [ "__name__" ]
                regex: "(etcd|grpc|rest_client|process|go)_(.+)"
                action: keep

        kubeProxy:
          endpoints:
            - 10.0.0.241
          serviceMonitor:
            metricRelabelings:
              - sourceLabels: [ "__name__" ]
                regex: "(kubeproxy|rest_client|process|go)_(.+)"
                action: keep

        kubeControllerManager:
          endpoints:
            - 10.0.0.241
          serviceMonitor:
            metricRelabelings:
              - sourceLabels: [ "__name__" ]
                regex: "(workqueue|rest_client|process|go)_(.+)"
                action: keep

        kubeScheduler:
          endpoints:
            - 10.0.0.241
          serviceMonitor:
            metricRelabelings:
              - sourceLabels: ["__name__"]
                regex: "(scheduler|rest_client|process|go)_(.+)"
                action: keep

  ignoreDifferences:
    - group: "apps"
      kind: "Deployment"
      jqPathExpressions:
        - .spec.template.spec.containers[].resources
        - .spec.template.spec.initContainers[].resources
    - group: "apps"
      kind: "DaemonSet"
      jqPathExpressions:
        - .spec.template.spec.containers[].resources
  destination:
    name: in-cluster
    namespace: monitoring
