{{ if .Values.networkPolicy.enabled }}
apiVersion: cilium.io/v2
kind: CiliumNetworkPolicy
metadata:
  name: prometheus-rules
  namespace: monitoring
spec:
  endpointSelector:
    matchLabels:
      prometheus: kube-prometheus-stack-prometheus
  ingress:
  - {}
  egress:
  - toEndpoints:
    - matchLabels:
        k8s:io.kubernetes.pod.namespace: haproxy-ingress
        k8s:app.kubernetes.io/name: haproxy-ingress
    toPorts:
    - ports:
      - port: '10254'
        protocol: TCP
      - port: '9101'
        protocol: TCP
  - toEndpoints:
    - matchLabels:
        k8s:io.kubernetes.pod.namespace: kube-system
        k8s:k8s-app: hubble-relay
    toPorts:
    - ports:
      - port: '9966'
        protocol: TCP
  - toEndpoints:
    - matchLabels:
        k8s:io.kubernetes.pod.namespace: argocd
        k8s:app.kubernetes.io/name: argocd-application-controller
    toPorts:
    - ports:
      - port: '8082'
        protocol: TCP
  - toEndpoints:
    - matchLabels:
        k8s:io.kubernetes.pod.namespace: monitoring
        k8s:app.kubernetes.io/name: kube-state-metrics
    toPorts:
    - ports:
      - port: '8080'
        protocol: TCP
      rules:
        http:
        - {}
  - toEndpoints:
    - matchLabels:
        k8s:io.kubernetes.pod.namespace: trivy-system
        k8s:app.kubernetes.io/name: trivy-operator
    toPorts:
    - ports:
      - port: '8080'
        protocol: TCP
      rules:
        http:
        - {}
  - toEndpoints:
    - matchLabels:
        k8s:io.kubernetes.pod.namespace: kube-system
        k8s:k8s-app: coredns
    toPorts:
    - ports:
      - port: '9153'
        protocol: TCP
  - toEndpoints:
    - matchLabels:
        k8s:io.kubernetes.pod.namespace: monitoring
        k8s:alertmanager: kube-prometheus-stack-alertmanager
    toPorts:
    - ports:
      - port: '9093'
        protocol: TCP
    - ports:
      - port: '8080'
        protocol: TCP
      rules:
        http:
        - {}
  - toEndpoints:
    - matchLabels:
        k8s:io.kubernetes.pod.namespace: argocd
        k8s:app.kubernetes.io/name: argocd-server
    toPorts:
    - ports:
      - port: '8083'
        protocol: TCP
  - toEndpoints:
    - matchLabels:
        k8s:io.kubernetes.pod.namespace: monitoring
        k8s:app: kube-prometheus-stack-operator
    toPorts:
    - ports:
      - port: '8080'
        protocol: TCP
      rules:
        http:
        - {}
  - toEndpoints:
    - matchLabels:
        k8s:io.kubernetes.pod.namespace: monitoring
        k8s:app.kubernetes.io/name: grafana
    toPorts:
    - ports:
      - port: '3000'
        protocol: TCP
  - toEndpoints:
    - matchLabels:
        k8s:io.kubernetes.pod.namespace: argocd
        k8s:app.kubernetes.io/name: argocd-repo-server
    toPorts:
    - ports:
      - port: '8084'
        protocol: TCP
---
apiVersion: cilium.io/v2
kind: CiliumNetworkPolicy
metadata:
  name: trivy-scan-job-rules
  namespace: trivy-system
spec:
  endpointSelector:
    matchLabels:
      trivy-operator.resource.kind: Pod
      vulnerabilityReport.scanner: Trivy
  ingress:
  - {}
  egress:
  - toEntities:
    - world
    toPorts:
    - ports:
      - port: '443'
        protocol: TCP
  - toEndpoints:
    - matchLabels:
        k8s:io.kubernetes.pod.namespace: kube-system
        k8s:k8s-app: coredns
    toPorts:
    - ports:
      - port: '53'
        protocol: UDP
      rules:
        dns:
        - matchPattern: "*"
---
apiVersion: cilium.io/v2
kind: CiliumNetworkPolicy
metadata:
  name: alertmanager-rules
  namespace: monitoring
spec:
  endpointSelector:
    matchLabels:
      alertmanager: kube-prometheus-stack-alertmanager
  ingress:
  - fromEndpoints:
    - matchLabels:
        k8s:io.kubernetes.pod.namespace: haproxy-ingress
        k8s:app.kubernetes.io/name: haproxy-ingress
    toPorts:
    - ports:
      - port: '9093'
        protocol: TCP
  egress:
  - toEndpoints:
    - matchLabels:
        k8s:io.kubernetes.pod.namespace: kube-system
        k8s:k8s-app: coredns
    toPorts:
    - ports:
      - port: '53'
        protocol: UDP
      rules:
        dns:
        - matchPattern: "*"
  - toEntities:
    - world
    toPorts:
    - ports:
      - port: '443'
        protocol: TCP
---
apiVersion: cilium.io/v2
kind: CiliumNetworkPolicy
metadata:
  name: argocd-server-rules
  namespace: argocd
spec:
  endpointSelector:
    matchLabels:
      app.kubernetes.io/name: argocd-server
  ingress:
  - fromEndpoints:
    - matchLabels:
        k8s:io.kubernetes.pod.namespace: haproxy-ingress
        k8s:app.kubernetes.io/name: haproxy-ingress
    toPorts:
    - ports:
      - port: '8080'
        protocol: TCP
      rules:
        http:
        - {}
  egress:
  - toEndpoints:
    - matchLabels:
        app.kubernetes.io/name: argocd-redis
    toPorts:
    - ports:
      - port: '6379'
        protocol: TCP
  - toEndpoints:
    - matchLabels:
        app.kubernetes.io/name: argocd-application-controller
    toPorts:
    - ports:
      - port: '8081'
        protocol: TCP
  - toEndpoints:
    - matchLabels:
        app.kubernetes.io/name: argocd-repo-server
    toPorts:
    - ports:
      - port: '8081'
        protocol: TCP
  - toEntities:
    - world
    toPorts:
    - ports:
      - port: '443'
        protocol: TCP
  - toEndpoints:
    - matchLabels:
        k8s:io.kubernetes.pod.namespace: kube-system
        k8s:k8s-app: coredns
    toPorts:
    - ports:
      - port: '53'
        protocol: UDP
      rules:
        dns:
        - matchPattern: "*"
---
apiVersion: cilium.io/v2
kind: CiliumNetworkPolicy
metadata:
  name: argocd-application-controller-rules
  namespace: argocd
spec:
  endpointSelector:
    matchLabels:
      app.kubernetes.io/name: argocd-application-controller
  ingress:
  - fromEndpoints:
    - matchLabels:
        k8s:io.kubernetes.pod.namespace: monitoring
        k8s:prometheus: kube-prometheus-stack-prometheus
    toPorts:
    - ports:
      - port: '8082'
        protocol: TCP
  - fromEndpoints:
    - matchLabels:
        app.kubernetes.io/name: argocd-server
    toPorts:
    - ports:
      - port: '8081'
        protocol: TCP
  egress:
  - toEndpoints:
    - matchLabels:
        app.kubernetes.io/name: argocd-redis
    toPorts:
    - ports:
      - port: '6379'
        protocol: TCP
  - toEndpoints:
    - matchLabels:
        app.kubernetes.io/name: argocd-repo-server
    toPorts:
    - ports:
      - port: '8081'
        protocol: TCP
  - toEndpoints:
    - matchLabels:
        k8s:io.kubernetes.pod.namespace: kube-system
        k8s:k8s-app: coredns
    toPorts:
    - ports:
      - port: '53'
        protocol: UDP
      rules:
        dns:
        - matchPattern: "*"
  - toEntities:
    - kube-apiserver
---
apiVersion: cilium.io/v2
kind: CiliumNetworkPolicy
metadata:
  name: argocd-repo-server-rules
  namespace: argocd
spec:
  endpointSelector:
    matchLabels:
      app.kubernetes.io/name: argocd-repo-server
  ingress:
  - fromEndpoints:
    - matchLabels:
        app.kubernetes.io/name: argocd-application-controller
    - matchLabels:
        app.kubernetes.io/name: argocd-server
    toPorts:
    - ports:
      - port: '8081'
        protocol: TCP
      - port: '8084'
        protocol: TCP
  egress:
  - toEntities:
    - world
    toPorts:
    - ports:
      - port: '443'
        protocol: TCP
  - toEndpoints:
    - matchLabels:
        k8s:io.kubernetes.pod.namespace: kube-system
        k8s:k8s-app: coredns
    toPorts:
    - ports:
      - port: '53'
        protocol: UDP
      rules:
        dns:
        - matchPattern: "*"
---
apiVersion: cilium.io/v2
kind: CiliumNetworkPolicy
metadata:
  name: argocd-redis-rules
  namespace: argocd
spec:
  endpointSelector:
    matchLabels:
      app.kubernetes.io/name: argocd-redis
  ingress:
  - fromEndpoints:
    - matchLabels:
        app.kubernetes.io/name: argocd-application-controller
    - matchLabels:
        app.kubernetes.io/name: argocd-server
    toPorts:
    - ports:
      - port: '6379'
        protocol: TCP
  egress:
  - toEndpoints:
    - matchLabels:
        k8s:io.kubernetes.pod.namespace: kube-system
        k8s:k8s-app: coredns
    toPorts:
    - ports:
      - port: '53'
        protocol: UDP
      rules:
        dns:
        - matchPattern: "*"
---
apiVersion: cilium.io/v2
kind: CiliumNetworkPolicy
metadata:
  name: grafana-rules
  namespace: monitoring
spec:
  endpointSelector:
    matchLabels:
      app.kubernetes.io/name: grafana
  ingress:
  - fromEndpoints:
    - matchLabels:
        k8s:io.kubernetes.pod.namespace: haproxy-ingress
        k8s:app.kubernetes.io/name: haproxy-ingress
    toPorts:
    - ports:
      - port: '3000'
        protocol: TCP
  egress:
  - toEndpoints:
    - matchLabels:
        k8s:io.kubernetes.pod.namespace: monitoring
        k8s:prometheus: kube-prometheus-stack-prometheus
    toPorts:
    - ports:
      - port: '9090'
        protocol: TCP
  - toEntities:
    - world
    toPorts:
    - ports:
      - port: '443'
        protocol: TCP
  - toEndpoints:
    - matchLabels:
        k8s:io.kubernetes.pod.namespace: kube-system
        k8s:k8s-app: coredns
    toPorts:
    - ports:
      - port: '53'
        protocol: UDP
      rules:
        dns:
        - matchPattern: "*"
---
apiVersion: cilium.io/v2
kind: CiliumNetworkPolicy
metadata:
  name: kube-state-metrics-rules
  namespace: monitoring
spec:
  endpointSelector:
    matchLabels:
      app.kubernetes.io/name: kube-state-metrics
  ingress:
  - fromEndpoints:
    - matchLabels:
        k8s:io.kubernetes.pod.namespace: monitoring
        k8s:prometheus: kube-prometheus-stack-prometheus
    toPorts:
    - ports:
      - port: '8080'
        protocol: TCP
      rules:
        http:
        - {}
  egress:
  - toEndpoints:
    - matchLabels:
        k8s:io.kubernetes.pod.namespace: kube-system
        k8s:k8s-app: coredns
    toPorts:
    - ports:
      - port: '53'
        protocol: UDP
      rules:
        dns:
        - matchPattern: "*"
---
apiVersion: cilium.io/v2
kind: CiliumNetworkPolicy
metadata:
  name: gha-runner-scale-set-listener-rules
  namespace: arc-runners
spec:
  endpointSelector:
    matchLabels:
      app.kubernetes.io/component: runner-scale-set-listener
  ingress:
  - {}
  egress:
  - toEntities:
    - world
    toPorts:
    - ports:
      - port: '443'
        protocol: TCP
  - toEndpoints:
    - matchLabels:
        k8s:io.kubernetes.pod.namespace: kube-system
        k8s:k8s-app: coredns
    toPorts:
    - ports:
      - port: '53'
        protocol: UDP
      rules:
        dns:
        - matchPattern: "*"
{{- end }}
